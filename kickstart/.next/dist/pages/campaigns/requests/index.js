'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _semanticUiReact = require('semantic-ui-react');

var _routes = require('../../../routes');

var _Layout = require('../../../components/Layout');

var _Layout2 = _interopRequireDefault(_Layout);

var _campaign = require('../../../ethereum/campaign');

var _campaign2 = _interopRequireDefault(_campaign);

var _RequestRow = require('../../../components/RequestRow');

var _RequestRow2 = _interopRequireDefault(_RequestRow);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _jsxFileName = '/Users/yu/inbox/kickstart/pages/campaigns/requests/index.js?entry';
//L194, 196, 202

var RequestIndex = function (_Component) {
  (0, _inherits3.default)(RequestIndex, _Component);

  function RequestIndex() {
    (0, _classCallCheck3.default)(this, RequestIndex);

    return (0, _possibleConstructorReturn3.default)(this, (RequestIndex.__proto__ || (0, _getPrototypeOf2.default)(RequestIndex)).apply(this, arguments));
  }

  (0, _createClass3.default)(RequestIndex, [{
    key: 'renderRows',

    //L205
    value: function renderRows() {
      var _this2 = this;

      return this.props.requests.map(function (request, index) {
        return _react2.default.createElement(_RequestRow2.default, {
          key: index,
          id: index,
          request: request,
          address: _this2.props.address

          //L207
          , approversCount: _this2.props.approversCount,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 39
          }
        });
      });
    }
  }, {
    key: 'render',
    value: function render() {
      var Header = _semanticUiReact.Table.Header,
          Row = _semanticUiReact.Table.Row,
          HeaderCell = _semanticUiReact.Table.HeaderCell,
          Body = _semanticUiReact.Table.Body;

      return _react2.default.createElement(_Layout2.default, {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 56
        }
      }, _react2.default.createElement('h3', {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 57
        }
      }, 'Requests'), _react2.default.createElement(_routes.Link, { route: '/campaigns/' + this.props.address + '/requests/new', __source: {
          fileName: _jsxFileName,
          lineNumber: 58
        }
      }, _react2.default.createElement('a', {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 59
        }
      }, _react2.default.createElement(_semanticUiReact.Button, { primary: true, floated: 'right', style: { marginBottom: 10 }, __source: {
          fileName: _jsxFileName,
          lineNumber: 61
        }
      }, 'Add Request by Manager'))), _react2.default.createElement(_semanticUiReact.Table, {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 68
        }
      }, _react2.default.createElement(Header, {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 69
        }
      }, _react2.default.createElement(Row, {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 70
        }
      }, _react2.default.createElement(HeaderCell, {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 71
        }
      }, 'ID'), _react2.default.createElement(HeaderCell, {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 72
        }
      }, 'Description'), _react2.default.createElement(HeaderCell, {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 73
        }
      }, 'Amount'), _react2.default.createElement(HeaderCell, {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 74
        }
      }, 'Recipient'), _react2.default.createElement(HeaderCell, {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 75
        }
      }, 'Approval Count'), _react2.default.createElement(HeaderCell, {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 76
        }
      }, 'Approve by Approvers'), _react2.default.createElement(HeaderCell, {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 77
        }
      }, 'Finalize by Manager'))), _react2.default.createElement(Body, {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 82
        }
      }, this.renderRows())), _react2.default.createElement('div', {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 87
        }
      }, 'Found ', this.props.requestCount, ' requests.'));
    }
  }], [{
    key: 'getInitialProps',
    value: function () {
      var _ref = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee(props) {
        var address, campaign, requestCount, approversCount, requests;
        return _regenerator2.default.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                address = props.query.address;

                //L202

                campaign = (0, _campaign2.default)(address);
                _context.next = 4;
                return campaign.methods.getRequestsCount().call();

              case 4:
                requestCount = _context.sent;
                _context.next = 7;
                return campaign.methods.approversCount().call();

              case 7:
                approversCount = _context.sent;
                _context.next = 10;
                return _promise2.default.all(Array(parseInt(requestCount)).fill().map(function (element, index) {
                  return campaign.methods.requests(index).call();
                }));

              case 10:
                requests = _context.sent;
                return _context.abrupt('return', { address: address, requests: requests, requestCount: requestCount, approversCount: approversCount });

              case 12:
              case 'end':
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function getInitialProps(_x) {
        return _ref.apply(this, arguments);
      }

      return getInitialProps;
    }()
  }]);

  return RequestIndex;
}(_react.Component);

exports.default = RequestIndex;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVua25vd24iXSwibmFtZXMiOlsiX2pzeEZpbGVOYW1lIiwiUmVxdWVzdEluZGV4IiwiX0NvbXBvbmVudCIsIl9fcHJvdG9fXyIsImFwcGx5IiwiYXJndW1lbnRzIiwia2V5IiwidmFsdWUiLCJyZW5kZXJSb3dzIiwiX3RoaXMyIiwicHJvcHMiLCJyZXF1ZXN0cyIsIm1hcCIsInJlcXVlc3QiLCJpbmRleCIsImNyZWF0ZUVsZW1lbnQiLCJpZCIsImFkZHJlc3MiLCJhcHByb3ZlcnNDb3VudCIsIl9fc291cmNlIiwiZmlsZU5hbWUiLCJsaW5lTnVtYmVyIiwicmVuZGVyIiwiSGVhZGVyIiwiUm93IiwiSGVhZGVyQ2VsbCIsIkJvZHkiLCJyb3V0ZSIsInByaW1hcnkiLCJmbG9hdGVkIiwic3R5bGUiLCJtYXJnaW5Cb3R0b20iLCJyZXF1ZXN0Q291bnQiLCJfcmVmIiwibWFyayIsIl9jYWxsZWUiLCJjYW1wYWlnbiIsIndyYXAiLCJfY2FsbGVlJCIsIl9jb250ZXh0IiwicHJldiIsIm5leHQiLCJxdWVyeSIsIm1ldGhvZHMiLCJnZXRSZXF1ZXN0c0NvdW50IiwiY2FsbCIsInNlbnQiLCJhbGwiLCJBcnJheSIsInBhcnNlSW50IiwiZmlsbCIsImVsZW1lbnQiLCJhYnJ1cHQiLCJzdG9wIiwiZ2V0SW5pdGlhbFByb3BzIiwiX3giXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFJQTs7OztBQUNBOztBQUNBOztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7Ozs7O0FBUkEsSUFBSUEsZUFBZSxtRUFBbkI7QUFDQTs7QUFTQSxJQUFJQyxlQUFlLFVBQVVDLFVBQVYsRUFBc0I7QUFDdkMsMEJBQVVELFlBQVYsRUFBd0JDLFVBQXhCOztBQUVBLFdBQVNELFlBQVQsR0FBd0I7QUFDdEIsa0NBQWdCLElBQWhCLEVBQXNCQSxZQUF0Qjs7QUFFQSxXQUFPLHlDQUEyQixJQUEz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QUssRUFBTDtBQUNFbEMsMkJBQVc0QixTQUFTTyxJQUFwQjtBQUNBLHVCQUFPUCxTQUFTYSxNQUFULENBQWdCLFFBQWhCLEVBQTBCLEVBQUVuQyxTQUFTQSxPQUFYLEVBQW9CTixVQUFVQSxRQUE5QixFQUF3Q3FCLGNBQWNBLFlBQXRELEVBQW9FZCxnQkFBZ0JBLGNBQXBGLEVBQTFCLENBQVA7O0FBRUYsbUJBQUssRUFBTDtBQUNBLG1CQUFLLEtBQUw7QUFDRSx1QkFBT3FCLFNBQVNjLElBQVQsRUFBUDtBQTVCSjtBQThCRDtBQUNGLFNBakNNLEVBaUNKbEIsT0FqQ0ksRUFpQ0ssSUFqQ0wsQ0FBUDtBQWtDRCxPQXBDMEMsQ0FBaEMsQ0FBWDs7QUFzQ0EsZUFBU21CLGVBQVQsQ0FBeUJDLEVBQXpCLEVBQTZCO0FBQzNCLGVBQU90QixLQUFLN0IsS0FBTCxDQUFXLElBQVgsRUFBaUJDLFNBQWpCLENBQVA7QUFDRDs7QUFFRCxhQUFPaUQsZUFBUDtBQUNELEtBNUNNO0FBRkosR0FBRCxDQXRNSjs7QUF1UEEsU0FBT3JELFlBQVA7QUFDRCxDQWpRa0Isa0JBQW5COztrQkFtUWVBLFkiLCJmaWxlIjoidW5rbm93biIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBfcmVnZW5lcmF0b3JSdW50aW1lIGZyb20gJ2JhYmVsLXJ1bnRpbWUvcmVnZW5lcmF0b3InO1xuaW1wb3J0IF9Qcm9taXNlIGZyb20gJ2JhYmVsLXJ1bnRpbWUvY29yZS1qcy9wcm9taXNlJztcbmltcG9ydCBfYXN5bmNUb0dlbmVyYXRvciBmcm9tICdiYWJlbC1ydW50aW1lL2hlbHBlcnMvYXN5bmNUb0dlbmVyYXRvcic7XG5pbXBvcnQgX09iamVjdCRnZXRQcm90b3R5cGVPZiBmcm9tICdiYWJlbC1ydW50aW1lL2NvcmUtanMvb2JqZWN0L2dldC1wcm90b3R5cGUtb2YnO1xuaW1wb3J0IF9jbGFzc0NhbGxDaGVjayBmcm9tICdiYWJlbC1ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2snO1xuaW1wb3J0IF9jcmVhdGVDbGFzcyBmcm9tICdiYWJlbC1ydW50aW1lL2hlbHBlcnMvY3JlYXRlQ2xhc3MnO1xuaW1wb3J0IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuIGZyb20gJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuJztcbmltcG9ydCBfaW5oZXJpdHMgZnJvbSAnYmFiZWwtcnVudGltZS9oZWxwZXJzL2luaGVyaXRzJztcbnZhciBfanN4RmlsZU5hbWUgPSAnL1VzZXJzL3l1L2luYm94L2tpY2tzdGFydC9wYWdlcy9jYW1wYWlnbnMvcmVxdWVzdHMvaW5kZXguanM/ZW50cnknO1xuLy9MMTk0LCAxOTYsIDIwMlxuXG5pbXBvcnQgUmVhY3QsIHsgQ29tcG9uZW50IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgQnV0dG9uLCBUYWJsZSB9IGZyb20gJ3NlbWFudGljLXVpLXJlYWN0JztcbmltcG9ydCB7IExpbmsgfSBmcm9tICcuLi8uLi8uLi9yb3V0ZXMnO1xuaW1wb3J0IExheW91dCBmcm9tICcuLi8uLi8uLi9jb21wb25lbnRzL0xheW91dCc7XG5pbXBvcnQgQ2FtcGFpZ24gZnJvbSAnLi4vLi4vLi4vZXRoZXJldW0vY2FtcGFpZ24nO1xuaW1wb3J0IFJlcXVlc3RSb3cgZnJvbSAnLi4vLi4vLi4vY29tcG9uZW50cy9SZXF1ZXN0Um93JztcblxudmFyIFJlcXVlc3RJbmRleCA9IGZ1bmN0aW9uIChfQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0cyhSZXF1ZXN0SW5kZXgsIF9Db21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIFJlcXVlc3RJbmRleCgpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgUmVxdWVzdEluZGV4KTtcblxuICAgIHJldHVybiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCAoUmVxdWVzdEluZGV4Ll9fcHJvdG9fXyB8fCBfT2JqZWN0JGdldFByb3RvdHlwZU9mKFJlcXVlc3RJbmRleCkpLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKFJlcXVlc3RJbmRleCwgW3tcbiAgICBrZXk6ICdyZW5kZXJSb3dzJyxcblxuXG4gICAgLy9MMjA1XG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlclJvd3MoKSB7XG4gICAgICB2YXIgX3RoaXMyID0gdGhpcztcblxuICAgICAgcmV0dXJuIHRoaXMucHJvcHMucmVxdWVzdHMubWFwKGZ1bmN0aW9uIChyZXF1ZXN0LCBpbmRleCkge1xuICAgICAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChSZXF1ZXN0Um93LCB7XG4gICAgICAgICAga2V5OiBpbmRleCxcbiAgICAgICAgICBpZDogaW5kZXgsXG4gICAgICAgICAgcmVxdWVzdDogcmVxdWVzdCxcbiAgICAgICAgICBhZGRyZXNzOiBfdGhpczIucHJvcHMuYWRkcmVzc1xuXG4gICAgICAgICAgLy9MMjA3XG4gICAgICAgICAgLCBhcHByb3ZlcnNDb3VudDogX3RoaXMyLnByb3BzLmFwcHJvdmVyc0NvdW50LFxuICAgICAgICAgIF9fc291cmNlOiB7XG4gICAgICAgICAgICBmaWxlTmFtZTogX2pzeEZpbGVOYW1lLFxuICAgICAgICAgICAgbGluZU51bWJlcjogMzlcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAncmVuZGVyJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgdmFyIEhlYWRlciA9IFRhYmxlLkhlYWRlcixcbiAgICAgICAgICBSb3cgPSBUYWJsZS5Sb3csXG4gICAgICAgICAgSGVhZGVyQ2VsbCA9IFRhYmxlLkhlYWRlckNlbGwsXG4gICAgICAgICAgQm9keSA9IFRhYmxlLkJvZHk7XG5cblxuICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgIExheW91dCxcbiAgICAgICAge1xuICAgICAgICAgIF9fc291cmNlOiB7XG4gICAgICAgICAgICBmaWxlTmFtZTogX2pzeEZpbGVOYW1lLFxuICAgICAgICAgICAgbGluZU51bWJlcjogNTZcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgJ2gzJyxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBfX3NvdXJjZToge1xuICAgICAgICAgICAgICBmaWxlTmFtZTogX2pzeEZpbGVOYW1lLFxuICAgICAgICAgICAgICBsaW5lTnVtYmVyOiA1N1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0sXG4gICAgICAgICAgJ1JlcXVlc3RzJ1xuICAgICAgICApLFxuICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgIExpbmssXG4gICAgICAgICAgeyByb3V0ZTogJy9jYW1wYWlnbnMvJyArIHRoaXMucHJvcHMuYWRkcmVzcyArICcvcmVxdWVzdHMvbmV3JywgX19zb3VyY2U6IHtcbiAgICAgICAgICAgICAgZmlsZU5hbWU6IF9qc3hGaWxlTmFtZSxcbiAgICAgICAgICAgICAgbGluZU51bWJlcjogNThcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9LFxuICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICAnYScsXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIF9fc291cmNlOiB7XG4gICAgICAgICAgICAgICAgZmlsZU5hbWU6IF9qc3hGaWxlTmFtZSxcbiAgICAgICAgICAgICAgICBsaW5lTnVtYmVyOiA1OVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICAgQnV0dG9uLFxuICAgICAgICAgICAgICB7IHByaW1hcnk6IHRydWUsIGZsb2F0ZWQ6ICdyaWdodCcsIHN0eWxlOiB7IG1hcmdpbkJvdHRvbTogMTAgfSwgX19zb3VyY2U6IHtcbiAgICAgICAgICAgICAgICAgIGZpbGVOYW1lOiBfanN4RmlsZU5hbWUsXG4gICAgICAgICAgICAgICAgICBsaW5lTnVtYmVyOiA2MVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgJ0FkZCBSZXF1ZXN0IGJ5IE1hbmFnZXInXG4gICAgICAgICAgICApXG4gICAgICAgICAgKVxuICAgICAgICApLFxuICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgIFRhYmxlLFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIF9fc291cmNlOiB7XG4gICAgICAgICAgICAgIGZpbGVOYW1lOiBfanN4RmlsZU5hbWUsXG4gICAgICAgICAgICAgIGxpbmVOdW1iZXI6IDY4XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSxcbiAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgSGVhZGVyLFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICBfX3NvdXJjZToge1xuICAgICAgICAgICAgICAgIGZpbGVOYW1lOiBfanN4RmlsZU5hbWUsXG4gICAgICAgICAgICAgICAgbGluZU51bWJlcjogNjlcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICAgIFJvdyxcbiAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIF9fc291cmNlOiB7XG4gICAgICAgICAgICAgICAgICBmaWxlTmFtZTogX2pzeEZpbGVOYW1lLFxuICAgICAgICAgICAgICAgICAgbGluZU51bWJlcjogNzBcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICAgICAgSGVhZGVyQ2VsbCxcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICBfX3NvdXJjZToge1xuICAgICAgICAgICAgICAgICAgICBmaWxlTmFtZTogX2pzeEZpbGVOYW1lLFxuICAgICAgICAgICAgICAgICAgICBsaW5lTnVtYmVyOiA3MVxuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgJ0lEJ1xuICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgICAgIEhlYWRlckNlbGwsXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgX19zb3VyY2U6IHtcbiAgICAgICAgICAgICAgICAgICAgZmlsZU5hbWU6IF9qc3hGaWxlTmFtZSxcbiAgICAgICAgICAgICAgICAgICAgbGluZU51bWJlcjogNzJcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICdEZXNjcmlwdGlvbidcbiAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICAgICBIZWFkZXJDZWxsLFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgIF9fc291cmNlOiB7XG4gICAgICAgICAgICAgICAgICAgIGZpbGVOYW1lOiBfanN4RmlsZU5hbWUsXG4gICAgICAgICAgICAgICAgICAgIGxpbmVOdW1iZXI6IDczXG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAnQW1vdW50J1xuICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgICAgIEhlYWRlckNlbGwsXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgX19zb3VyY2U6IHtcbiAgICAgICAgICAgICAgICAgICAgZmlsZU5hbWU6IF9qc3hGaWxlTmFtZSxcbiAgICAgICAgICAgICAgICAgICAgbGluZU51bWJlcjogNzRcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICdSZWNpcGllbnQnXG4gICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICAgICAgSGVhZGVyQ2VsbCxcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICBfX3NvdXJjZToge1xuICAgICAgICAgICAgICAgICAgICBmaWxlTmFtZTogX2pzeEZpbGVOYW1lLFxuICAgICAgICAgICAgICAgICAgICBsaW5lTnVtYmVyOiA3NVxuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgJ0FwcHJvdmFsIENvdW50J1xuICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgICAgIEhlYWRlckNlbGwsXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgX19zb3VyY2U6IHtcbiAgICAgICAgICAgICAgICAgICAgZmlsZU5hbWU6IF9qc3hGaWxlTmFtZSxcbiAgICAgICAgICAgICAgICAgICAgbGluZU51bWJlcjogNzZcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICdBcHByb3ZlIGJ5IEFwcHJvdmVycydcbiAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICAgICBIZWFkZXJDZWxsLFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgIF9fc291cmNlOiB7XG4gICAgICAgICAgICAgICAgICAgIGZpbGVOYW1lOiBfanN4RmlsZU5hbWUsXG4gICAgICAgICAgICAgICAgICAgIGxpbmVOdW1iZXI6IDc3XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAnRmluYWxpemUgYnkgTWFuYWdlcidcbiAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgKVxuICAgICAgICAgICksXG4gICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgIEJvZHksXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIF9fc291cmNlOiB7XG4gICAgICAgICAgICAgICAgZmlsZU5hbWU6IF9qc3hGaWxlTmFtZSxcbiAgICAgICAgICAgICAgICBsaW5lTnVtYmVyOiA4MlxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgdGhpcy5yZW5kZXJSb3dzKClcbiAgICAgICAgICApXG4gICAgICAgICksXG4gICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgJ2RpdicsXG4gICAgICAgICAge1xuICAgICAgICAgICAgX19zb3VyY2U6IHtcbiAgICAgICAgICAgICAgZmlsZU5hbWU6IF9qc3hGaWxlTmFtZSxcbiAgICAgICAgICAgICAgbGluZU51bWJlcjogODdcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9LFxuICAgICAgICAgICdGb3VuZCAnLFxuICAgICAgICAgIHRoaXMucHJvcHMucmVxdWVzdENvdW50LFxuICAgICAgICAgICcgcmVxdWVzdHMuJ1xuICAgICAgICApXG4gICAgICApO1xuICAgIH1cbiAgfV0sIFt7XG4gICAga2V5OiAnZ2V0SW5pdGlhbFByb3BzJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIF9yZWYgPSBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL19yZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlKHByb3BzKSB7XG4gICAgICAgIHZhciBhZGRyZXNzLCBjYW1wYWlnbiwgcmVxdWVzdENvdW50LCBhcHByb3ZlcnNDb3VudCwgcmVxdWVzdHM7XG4gICAgICAgIHJldHVybiBfcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZSQoX2NvbnRleHQpIHtcbiAgICAgICAgICB3aGlsZSAoMSkge1xuICAgICAgICAgICAgc3dpdGNoIChfY29udGV4dC5wcmV2ID0gX2NvbnRleHQubmV4dCkge1xuICAgICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgYWRkcmVzcyA9IHByb3BzLnF1ZXJ5LmFkZHJlc3M7XG5cbiAgICAgICAgICAgICAgICAvL0wyMDJcblxuICAgICAgICAgICAgICAgIGNhbXBhaWduID0gQ2FtcGFpZ24oYWRkcmVzcyk7XG4gICAgICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDQ7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGNhbXBhaWduLm1ldGhvZHMuZ2V0UmVxdWVzdHNDb3VudCgpLmNhbGwoKTtcblxuICAgICAgICAgICAgICBjYXNlIDQ6XG4gICAgICAgICAgICAgICAgcmVxdWVzdENvdW50ID0gX2NvbnRleHQuc2VudDtcbiAgICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gNztcbiAgICAgICAgICAgICAgICByZXR1cm4gY2FtcGFpZ24ubWV0aG9kcy5hcHByb3ZlcnNDb3VudCgpLmNhbGwoKTtcblxuICAgICAgICAgICAgICBjYXNlIDc6XG4gICAgICAgICAgICAgICAgYXBwcm92ZXJzQ291bnQgPSBfY29udGV4dC5zZW50O1xuICAgICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSAxMDtcbiAgICAgICAgICAgICAgICByZXR1cm4gX1Byb21pc2UuYWxsKEFycmF5KHBhcnNlSW50KHJlcXVlc3RDb3VudCkpLmZpbGwoKS5tYXAoZnVuY3Rpb24gKGVsZW1lbnQsIGluZGV4KSB7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gY2FtcGFpZ24ubWV0aG9kcy5yZXF1ZXN0cyhpbmRleCkuY2FsbCgpO1xuICAgICAgICAgICAgICAgIH0pKTtcblxuICAgICAgICAgICAgICBjYXNlIDEwOlxuICAgICAgICAgICAgICAgIHJlcXVlc3RzID0gX2NvbnRleHQuc2VudDtcbiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQuYWJydXB0KCdyZXR1cm4nLCB7IGFkZHJlc3M6IGFkZHJlc3MsIHJlcXVlc3RzOiByZXF1ZXN0cywgcmVxdWVzdENvdW50OiByZXF1ZXN0Q291bnQsIGFwcHJvdmVyc0NvdW50OiBhcHByb3ZlcnNDb3VudCB9KTtcblxuICAgICAgICAgICAgICBjYXNlIDEyOlxuICAgICAgICAgICAgICBjYXNlICdlbmQnOlxuICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dC5zdG9wKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9LCBfY2FsbGVlLCB0aGlzKTtcbiAgICAgIH0pKTtcblxuICAgICAgZnVuY3Rpb24gZ2V0SW5pdGlhbFByb3BzKF94KSB7XG4gICAgICAgIHJldHVybiBfcmVmLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBnZXRJbml0aWFsUHJvcHM7XG4gICAgfSgpXG4gIH1dKTtcblxuICByZXR1cm4gUmVxdWVzdEluZGV4O1xufShDb21wb25lbnQpO1xuXG5leHBvcnQgZGVmYXVsdCBSZXF1ZXN0SW5kZXg7Il19
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVua25vd24iXSwibmFtZXMiOlsiX2pzeEZpbGVOYW1lIiwiUmVxdWVzdEluZGV4IiwiX0NvbXBvbmVudCIsIl9fcHJvdG9fXyIsImFwcGx5IiwiYXJndW1lbnRzIiwia2V5IiwidmFsdWUiLCJyZW5kZXJSb3dzIiwiX3RoaXMyIiwicHJvcHMiLCJyZXF1ZXN0cyIsIm1hcCIsInJlcXVlc3QiLCJpbmRleCIsImNyZWF0ZUVsZW1lbnQiLCJpZCIsImFkZHJlc3MiLCJhcHByb3ZlcnNDb3VudCIsIl9fc291cmNlIiwiZmlsZU5hbWUiLCJsaW5lTnVtYmVyIiwicmVuZGVyIiwiSGVhZGVyIiwiUm93IiwiSGVhZGVyQ2VsbCIsIkJvZHkiLCJyb3V0ZSIsInByaW1hcnkiLCJmbG9hdGVkIiwic3R5bGUiLCJtYXJnaW5Cb3R0b20iLCJyZXF1ZXN0Q291bnQiLCJfcmVmIiwibWFyayIsIl9jYWxsZWUiLCJjYW1wYWlnbiIsIndyYXAiLCJfY2FsbGVlJCIsIl9jb250ZXh0IiwicHJldiIsIm5leHQiLCJxdWVyeSIsIm1ldGhvZHMiLCJnZXRSZXF1ZXN0c0NvdW50IiwiY2FsbCIsInNlbnQiLCJhbGwiLCJBcnJheSIsInBhcnNlSW50IiwiZmlsbCIsImVsZW1lbnQiLCJhYnJ1cHQiLCJzdG9wIiwiZ2V0SW5pdGlhbFByb3BzIiwiX3giXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFJQTs7OztBQUNBOztBQUNBOztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7Ozs7O0FBUkEsSUFBSUEsZUFBZSxtRUFBbkI7QUFDQTs7QUFTQSxJQUFJQyxlQUFlLFVBQVVDLFVBQVYsRUFBc0I7QUFDdkMsMEJBQVVELFlBQVYsRUFBd0JDLFVBQXhCOztBQUVBLFdBQVNELFlBQVQsR0FBd0I7QUFDdEIsa0NBQWdCLElBQWhCLEVBQXNCQSxZQUF0Qjs7QUFFQSxXQUFPLHlDQUEyQixJQUEz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