'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _semanticUiReact = require('semantic-ui-react');

var _campaign = require('../ethereum/campaign');

var _campaign2 = _interopRequireDefault(_campaign);

var _web = require('../ethereum/web3');

var _web2 = _interopRequireDefault(_web);

var _routes = require('../routes');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _jsxFileName = '/Users/yu/inbox/kickstart/components/ContributeForm.js';
//L187

//L190
//L192 refreshing contract data

var ContributeForm = function (_Component) {
  (0, _inherits3.default)(ContributeForm, _Component);

  function ContributeForm() {
    var _ref,
        _this2 = this;

    var _temp, _this, _ret;

    (0, _classCallCheck3.default)(this, ContributeForm);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_ref = ContributeForm.__proto__ || (0, _getPrototypeOf2.default)(ContributeForm)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
      value: '',
      errorMessage: '', //L193 errormessage
      loading: false
    }, _this.onSubmit = function () {
      var _ref2 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee(event) {
        var campaign, accounts;
        return _regenerator2.default.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                event.preventDefault();

                //L190 addressを指定
                campaign = (0, _campaign2.default)(_this.props.address);

                _this.setState({ loading: true, errorMessage: '' });

                //L191
                //エラー表示するためのtry-catch statement
                //etherからweiに変換
                _context.prev = 3;
                _context.next = 6;
                return _web2.default.eth.getAccounts();

              case 6:
                accounts = _context.sent;
                _context.next = 9;
                return campaign.methods.contribute().send({
                  from: accounts[0],
                  value: _web2.default.utils.toWei(_this.state.value, 'ether')
                });

              case 9:

                //L192 refreshing contract data, updating page automatically
                _routes.Router.replaceRoute('/campaigns/' + _this.props.address);

                _context.next = 15;
                break;

              case 12:
                _context.prev = 12;
                _context.t0 = _context['catch'](3);

                _this.setState({ errorMessage: _context.t0.message }); //L193 show error message

              case 15:

                //L193 loadingが失敗したら、''空欄を返す
                _this.setState({ loading: false, value: '' });

              case 16:
              case 'end':
                return _context.stop();
            }
          }
        }, _callee, _this2, [[3, 12]]);
      }));

      return function (_x) {
        return _ref2.apply(this, arguments);
      };
    }(), _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);
  }
  //L189


  (0, _createClass3.default)(ContributeForm, [{
    key: 'render',
    value: function render() {
      var _this3 = this;

      return _react2.default.createElement(_semanticUiReact.Form, { onSubmit: this.onSubmit, error: !!this.state.errorMessage, __source: {
          fileName: _jsxFileName,
          lineNumber: 48
        }
      }, _react2.default.createElement(_semanticUiReact.Form.Field, {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 49
        }
      }, _react2.default.createElement('label', {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 50
        }
      }, 'Amount to Contribute'), _react2.default.createElement(_semanticUiReact.Input, {
        value: this.state.value,
        onChange: function onChange(event) {
          return _this3.setState({ value: event.target.value });
        },
        label: 'ether',
        labelPosition: 'right',
        __source: {
          fileName: _jsxFileName,
          lineNumber: 51
        }
      })), _react2.default.createElement(_semanticUiReact.Message, { error: true, header: 'Oops!', content: this.state.errorMessage, __source: {
          fileName: _jsxFileName,
          lineNumber: 59
        }
      }), _react2.default.createElement(_semanticUiReact.Button, { primary: true, loading: this.state.loading, __source: {
          fileName: _jsxFileName,
          lineNumber: 60
        }
      }, 'Contribute!'));
    }
  }]);

  return ContributeForm;
}(_react.Component);

exports.default = ContributeForm;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVua25vd24iXSwibmFtZXMiOlsiX2pzeEZpbGVOYW1lIiwiQ29udHJpYnV0ZUZvcm0iLCJfQ29tcG9uZW50IiwiX3JlZiIsIl90aGlzMiIsIl90ZW1wIiwiX3RoaXMiLCJfcmV0IiwiX2xlbiIsImFyZ3VtZW50cyIsImxlbmd0aCIsImFyZ3MiLCJBcnJheSIsIl9rZXkiLCJfX3Byb3RvX18iLCJjYWxsIiwiYXBwbHkiLCJjb25jYXQiLCJzdGF0ZSIsInZhbHVlIiwiZXJyb3JNZXNzYWdlIiwibG9hZGluZyIsIm9uU3VibWl0IiwiX3JlZjIiLCJtYXJrIiwiX2NhbGxlZSIsImV2ZW50IiwiY2FtcGFpZ24iLCJhY2NvdW50cyIsIndyYXAiLCJfY2FsbGVlJCIsIl9jb250ZXh0IiwicHJldiIsIm5leHQiLCJwcmV2ZW50RGVmYXVsdCIsInByb3BzIiwiYWRkcmVzcyIsInNldFN0YXRlIiwiZXRoIiwiZ2V0QWNjb3VudHMiLCJzZW50IiwibWV0aG9kcyIsImNvbnRyaWJ1dGUiLCJzZW5kIiwiZnJvbSIsInV0aWxzIiwidG9XZWkiLCJyZXBsYWNlUm91dGUiLCJ0MCIsIm1lc3NhZ2UiLCJzdG9wIiwiX3giLCJrZXkiLCJyZW5kZXIiLCJfdGhpczMiLCJjcmVhdGVFbGVtZW50IiwiZXJyb3IiLCJfX3NvdXJjZSIsImZpbGVOYW1lIiwibGluZU51bWJlciIsIkZpZWxkIiwib25DaGFuZ2UiLCJ0YXJnZXQiLCJsYWJlbCIsImxhYmVsUG9zaXRpb24iLCJoZWFkZXIiLCJjb250ZW50IiwicHJpbWFyeSJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUE7Ozs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFJQTs7OztBQUNBOztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQVBBLElBQUlBLGVBQWUsd0RBQW5CO0FBQ0E7O0FBSTZDO0FBRVQ7O0FBRXBDLElBQUlDLGlCQUFpQixVQUFVQyxVQUFWLEVBQXNCO0FBQ3pDLDBCQUFVRCxj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