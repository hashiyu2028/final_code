'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _semanticUiReact = require('semantic-ui-react');

var _web = require('../ethereum/web3');

var _web2 = _interopRequireDefault(_web);

var _campaign = require('../ethereum/campaign');

var _campaign2 = _interopRequireDefault(_campaign);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _jsxFileName = '/Users/yu/inbox/kickstart/components/RequestRow.js';
//L205

//L208

var RequestRow = function (_Component) {
  (0, _inherits3.default)(RequestRow, _Component);

  function RequestRow() {
    var _ref,
        _this2 = this;

    var _temp, _this, _ret;

    (0, _classCallCheck3.default)(this, RequestRow);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_ref = RequestRow.__proto__ || (0, _getPrototypeOf2.default)(RequestRow)).call.apply(_ref, [this].concat(args))), _this), _this.onApprove = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee() {
      var campaign, accounts;
      return _regenerator2.default.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              campaign = (0, _campaign2.default)(_this.props.address);
              _context.next = 3;
              return _web2.default.eth.getAccounts();

            case 3:
              accounts = _context.sent;
              _context.next = 6;
              return campaign.methods.approveRequest(_this.props.id).send({
                from: accounts[0]
              });

            case 6:
            case 'end':
              return _context.stop();
          }
        }
      }, _callee, _this2);
    })), _this.onFinalize = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee2() {
      var campaign, accounts;
      return _regenerator2.default.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              campaign = (0, _campaign2.default)(_this.props.address);
              _context2.next = 3;
              return _web2.default.eth.getAccounts();

            case 3:
              accounts = _context2.sent;
              _context2.next = 6;
              return campaign.methods.finalizeRequest(_this.props.id).send({
                from: accounts[0]
              });

            case 6:
            case 'end':
              return _context2.stop();
          }
        }
      }, _callee2, _this2);
    })), _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);
  }

  //L209


  (0, _createClass3.default)(RequestRow, [{
    key: 'render',
    value: function render() {
      var Row = _semanticUiReact.Table.Row,
          Cell = _semanticUiReact.Table.Cell;

      // const { id, request }= this.props;

      var _props = this.props,
          id = _props.id,
          request = _props.request,
          approversCount = _props.approversCount; //L207

      //L211

      var readyToFinalize = request.approvalCount > approversCount / 2;

      //L205, 206
      return (
        // <div>Request!</div> //L205
        _react2.default.createElement(Row, {
          disabled: request.complete //L211 Approveされるとグレーアウト
          , positive: readyToFinalize && !request.complete //Ready to finalizeだとグリーンに
          , __source: {
            fileName: _jsxFileName,
            lineNumber: 41
          }
        }, _react2.default.createElement(Cell, {
          __source: {
            fileName: _jsxFileName,
            lineNumber: 47
          }
        }, id), _react2.default.createElement(Cell, {
          __source: {
            fileName: _jsxFileName,
            lineNumber: 48
          }
        }, request.description), _react2.default.createElement(Cell, {
          __source: {
            fileName: _jsxFileName,
            lineNumber: 49
          }
        }, _web2.default.utils.fromWei(request.value, 'ether')), _react2.default.createElement(Cell, {
          __source: {
            fileName: _jsxFileName,
            lineNumber: 50
          }
        }, request.recipient), _react2.default.createElement(Cell, {
          __source: {
            fileName: _jsxFileName,
            lineNumber: 52
          }
        }, request.approvalCount, '/', approversCount), _react2.default.createElement(Cell, {
          __source: {
            fileName: _jsxFileName,
            lineNumber: 58
          }
        }, request.complete ? null : _react2.default.createElement(_semanticUiReact.Button, { color: 'green', basic: true, onClick: this.onApprove, __source: {
            fileName: _jsxFileName,
            lineNumber: 60
          }
        }, 'Approve')), _react2.default.createElement(Cell, {
          __source: {
            fileName: _jsxFileName,
            lineNumber: 66
          }
        }, request.complete ? null : _react2.default.createElement(_semanticUiReact.Button, { color: 'teal', basic: true, onClick: this.onFinalize, __source: {
            fileName: _jsxFileName,
            lineNumber: 68
          }
        }, 'Finalize')))
      );
    }
  }]);

  return RequestRow;
}(_react.Component);

exports.default = RequestRow;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVua25vd24iXSwibmFtZXMiOlsiX2pzeEZpbGVOYW1lIiwiUmVxdWVzdFJvdyIsIl9Db21wb25lbnQiLCJfcmVmIiwiX3RoaXMyIiwiX3RlbXAiLCJfdGhpcyIsIl9yZXQiLCJfbGVuIiwiYXJndW1lbnRzIiwibGVuZ3RoIiwiYXJncyIsIkFycmF5IiwiX2tleSIsIl9fcHJvdG9fXyIsImNhbGwiLCJhcHBseSIsImNvbmNhdCIsIm9uQXBwcm92ZSIsIm1hcmsiLCJfY2FsbGVlIiwiY2FtcGFpZ24iLCJhY2NvdW50cyIsIndyYXAiLCJfY2FsbGVlJCIsIl9jb250ZXh0IiwicHJldiIsIm5leHQiLCJwcm9wcyIsImFkZHJlc3MiLCJldGgiLCJnZXRBY2NvdW50cyIsInNlbnQiLCJtZXRob2RzIiwiYXBwcm92ZVJlcXVlc3QiLCJpZCIsInNlbmQiLCJmcm9tIiwic3RvcCIsIm9uRmluYWxpemUiLCJfY2FsbGVlMiIsIl9jYWxsZWUyJCIsIl9jb250ZXh0MiIsImZpbmFsaXplUmVxdWVzdCIsImtleSIsInZhbHVlIiwicmVuZGVyIiwiUm93IiwiQ2VsbCIsIl9wcm9wcyIsInJlcXVlc3QiLCJhcHByb3ZlcnNDb3VudCIsInJlYWR5VG9GaW5hbGl6ZSIsImFwcHJvdmFsQ291bnQiLCJjcmVhdGVFbGVtZW50IiwiZGlzYWJsZWQiLCJjb21wbGV0ZSIsInBvc2l0aXZlIiwiX19zb3VyY2UiLCJmaWxlTmFtZSIsImxpbmVOdW1iZXIiLCJkZXNjcmlwdGlvbiIsInV0aWxzIiwiZnJvbVdlaSIsInJlY2lwaWVudCIsImNvbG9yIiwiYmFzaWMiLCJvbkNsaWNrIl0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUlBOzs7O0FBQ0E7O0FBQ0E7Ozs7QUFDQTs7Ozs7O0FBTkEsSUFBSUEsZUFBZSxvREFBbkI7QUFDQTs7QUFLNkM7O0FBRTdDLElBQUlDLGFBQWEsVUFBVUMsVUFBVixF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